{"version":3,"sources":["component/Card.js","component/CardList.js","component/Scrolle.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","componentCard","robots","map","user","e","key","Scrole","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","data","filterRobots","this","filter","robot","toLowerCase","includes","type","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iNAeeA,G,MAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAEjB,OACA,yBAAKC,UAAU,0CACX,yBAAKC,IAAK,SAASC,IAAG,+BAA0BL,KAChD,6BACJ,4BAAKC,GACJ,2BAAIC,OCEEI,EATE,SAAC,GAAY,IACtBC,EADqB,EAAVC,OACWC,KAAI,SAACC,EAAMC,GAAP,OAAY,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIU,EAAKV,GAAIC,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAElG,OACI,6BACCK,ICCMM,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,mBAAoBC,OAAO,WAC/DJ,EAAMK,WCuCJC,E,YAtCX,aAAc,IAAD,8BACT,+CAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZzC,EAAKC,MAAM,CACPnB,OAAQ,GACRgB,YAAY,IAJP,E,iFAOO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAG,EAAKT,SAAS,CAACf,OAAQwB,S,+BAO/B,IAAD,OACEC,EAAeC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAAC,GAC1C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEpE,OAEI,oCACA,yBAAKlC,UAAU,MACX,6CACA,2BAAOA,UAAU,gDAAgDoC,KAAK,SAASC,SAAUN,KAAKb,eAAgBoB,YAAY,eAC1H,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUjC,OAAQyB,W,GA7BnBS,IAAMC,W,MCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bf78e2b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../container/App.css'\r\nconst Card = ({id, name, email})=>{\r\n    \r\n        return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\r\n            <img alt ='jhvjhv' src={`https://robohash.org/${id}`}></img>\r\n            <div>\r\n        <h2>{name}</h2>\r\n         <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        )\r\n    \r\n}\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nconst CardList = ({robots})=>{\r\n    var componentCard= robots.map((user, e)=> <Card key={e} id={user.id} name={user.name} email={user.email} />\r\n    )\r\n    return(\r\n        <div>\r\n        {componentCard}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList","import React from 'react';\r\nconst Scrole = (props)=>{\r\n    return(\r\n        <div style={{overflow: 'scroll', border: '10px black solid', height:'1000px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scrole","import React from 'react';\r\nimport CardList from '../component/CardList';\r\nimport '../index.css';\r\nimport Scrole from '../component/Scrolle';\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchField:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data=> this.setState({robots: data}))\r\n        \r\n    }\r\n    onSearchChange = (event)=> {\r\n        this.setState({searchField: event.target.value})\r\n\r\n    }\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        } )\r\n        return(\r\n            \r\n            <>\r\n            <div className='tc'>\r\n                <h1>Robot Friends</h1>\r\n                <input className='pa3 ba b--dotted bw1 b--blue bg-lightest-blue' type='search' onChange={this.onSearchChange} placeholder='Search Bar'></input>\r\n                <Scrole>\r\n                   <CardList robots={filterRobots}/>\r\n\r\n                </Scrole>\r\n                </div>\r\n                \r\n                </>\r\n        )\r\n    }\r\n    }\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}